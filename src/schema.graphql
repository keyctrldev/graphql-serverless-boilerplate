type Claim {
  claimStatus: String
  medicationName: String
  claimId: String
  claimDate: String
  medicationCost: Int
  planPaid: Int
  memberPaid: Int
  memberId: String
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  medications: [Medication!]
}
input MedicationInput {
  medName: String!
  quantity: Int!
  refillDate: String!
  priorAuth: PriorAuthInput!
}

input PriorAuthInput {
  userId: String!
  status: StatusInput!
}

input StatusInput {
  status: String!
}

type Status {
  status: String!
}

type PriorAuth {
  userId: String!
  status: Status!
}

type Medication {
  medName: String!
  quantity: Int!
  refillDate: String!
  priorAuth: PriorAuth!
}
input UserInput {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  medications: [MedicationInput!]
}

type Query {
  claims(memberId: String!): [Claim]
  User(id: ID!): User
  Users: [User]
}

type Mutation {
  createUser(input: UserInput!): User
}